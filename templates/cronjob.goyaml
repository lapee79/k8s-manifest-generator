apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{.Name}}
  labels:
    app.kubernetes.io/name: {{.Name}}
spec:
  {{- if .CronJobSpec.TimeZone}}
  timeZone: "{{.CronJobSpec.TimeZone}}"
  {{- end}}
  schedule: "{{.CronJobSpec.Schedule}}"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: {{or .CronJobSpec.TtlSecondsAfterFinished 172800}}
      {{- if .CronJobSpec.BackoffLimit}}
      backoffLimit: {{.CronJobSpec.BackoffLimit}}
      {{- end}}
      template:
        spec:
          restartPolicy: {{or .CronJobSpec.RestartPolicy "Never"}}
          activeDeadlineSeconds: {{or .CronJobSpec.ActiveDeadlineSeconds 36000}}
          containers:
            - name: app
              image: private-image
              imagePullPolicy: IfNotPresent
            {{- if .ContainerPort}}
              ports:
                - containerPort: {{.ContainerPort}}
            {{- end}}
            {{- if .Secret}}
              volumeMounts:
                - name: {{.Name}}
                  mountPath: "/mnt/secrets-store"
                  readOnly: true
            {{- end}}
            {{- if .Config}}
              envFrom:
                - configMapRef:
                    name: {{.Name}}
            {{- end}}
            {{- if .Secret}}
                - secretRef:
                    name: {{.Name}}
            {{- end}}
            {{- if .ReadinessProbe}}
              readinessProbe:
              {{- if .ReadinessProbe.Exec}}
                exec:
                  command:
                {{- range $value := .ReadinessProbe.Exec.Command}}
                    - {{$value}}
                {{- end}}
              {{- end}}
              {{- if .ReadinessProbe.HttpGet}}
                httpGet:
                  path: {{.ReadinessProbe.HttpGet.Path}}
                  port: {{.ReadinessProbe.HttpGet.Port}}
                {{- if .ReadinessProbe.HttpGet.HttpHeader}}
                  httpHeaders:
                {{- range $value := .ReadinessProbe.HttpGet.HttpHeader}}
                    - name: {{$value.Name}}
                      value: {{$value.Value}}
                {{- end}}
                {{- end}}
              {{- end}}
              {{- if .ReadinessProbe.TcpSocket}}
                tcpSocket:
                  port: {{.ReadinessProbe.TcpSocket.Port}}
              {{- end}}
              {{- if .ReadinessProbe.InitialDelaySeconds}}
                initialDelaySeconds: {{.ReadinessProbe.InitialDelaySeconds}}
              {{- end}}
              {{- if .ReadinessProbe.PeriodSeconds}}
                periodSeconds: {{.ReadinessProbe.PeriodSeconds}}
              {{- end}}
              {{- if .ReadinessProbe.TimeoutSeconds}}
                timeoutSeconds: {{.ReadinessProbe.TimeoutSeconds}}
              {{- end}}
              {{- if .ReadinessProbe.SuccessThreshold}}
                successThreshold: {{.ReadinessProbe.SuccessThreshold}}
              {{- end}}
              {{- if .ReadinessProbe.FailureThreshold}}
                failureThreshold: {{.ReadinessProbe.FailureThreshold}}
              {{- end}}
            {{- end}}
            {{- if .LivenessProbe}}
              livenessProbe:
              {{- if .LivenessProbe.Exec}}
                exec:
                  command:
                {{- range $value := .LivenessProbe.Exec.Command}}
                    - {{$value}}
                {{- end}}
              {{- end}}
              {{- if .LivenessProbe.HttpGet}}
                httpGet:
                  path: {{.LivenessProbe.HttpGet.Path}}
                  port: {{.LivenessProbe.HttpGet.Port}}
                {{- if .LivenessProbe.HttpGet.HttpHeader}}
                  httpHeaders:
                {{- range $value := .LivenessProbe.HttpGet.HttpHeader}}
                    - name: {{$value.Name}}
                      value: {{$value.Value}}
                {{- end}}
                {{- end}}
              {{- end}}
              {{- if .LivenessProbe.TcpSocket}}
                tcpSocket:
                  port: {{.LivenessProbe.TcpSocket.Port}}
              {{- end}}
              {{- if .LivenessProbe.InitialDelaySeconds}}
                initialDelaySeconds: {{.LivenessProbe.InitialDelaySeconds}}
              {{- end}}
              {{- if .LivenessProbe.PeriodSeconds}}
                periodSeconds: {{.LivenessProbe.PeriodSeconds}}
              {{- end}}
              {{- if .LivenessProbe.TimeoutSeconds}}
                timeoutSeconds: {{.LivenessProbe.TimeoutSeconds}}
              {{- end}}
              {{- if .LivenessProbe.SuccessThreshold}}
                successThreshold: {{.LivenessProbe.SuccessThreshold}}
              {{- end}}
              {{- if .LivenessProbe.FailureThreshold}}
                failureThreshold: {{.LivenessProbe.FailureThreshold}}
              {{- end}}
            {{- end}}
              resources:
                requests:
                  cpu: {{.Resources.Requests.CPU}}
                  memory: {{.Resources.Requests.Memory}}
              {{- if .Resources.Limits}}
                limits:
                  cpu: {{.Resources.Limits.CPU}}
                  memory: {{.Resources.Limits.Memory}}
              {{- end}}
          {{- if .Secret}}
          volumes:
            - name: {{.Name}}
              csi:
                driver: secrets-store.csi.k8s.io
                readOnly: true
                volumeAttributes:
                  secretProviderClass: "{{.Name}}"
                {{- if .AzKvSpSecret}}
                nodePublishSecretRef:
                  name: {{.AzKvSpSecret}}
                {{- end}}
          {{- end}}
